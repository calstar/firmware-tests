// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMON_CALSTAR_H_
#define FLATBUFFERS_GENERATED_COMMON_CALSTAR_H_

#include "flatbuffers/flatbuffers.h"

namespace Calstar {

struct FCData;

struct TPCData;

enum MessageType {
  MessageType_FCData = 0,
  MessageType_TPCData = 1,
  MessageType_MIN = MessageType_FCData,
  MessageType_MAX = MessageType_TPCData
};

inline const MessageType (&EnumValuesMessageType())[2] {
  static const MessageType values[] = {
    MessageType_FCData,
    MessageType_TPCData
  };
  return values;
}

inline const char * const *EnumNamesMessageType() {
  static const char * const names[] = {
    "FCData",
    "TPCData",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (e < MessageType_FCData || e > MessageType_TPCData) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesMessageType()[index];
}

enum FCState {
  FCState_Pad = 0,
  FCState_Flight = 1,
  FCState_MIN = FCState_Pad,
  FCState_MAX = FCState_Flight
};

inline const FCState (&EnumValuesFCState())[2] {
  static const FCState values[] = {
    FCState_Pad,
    FCState_Flight
  };
  return values;
}

inline const char * const *EnumNamesFCState() {
  static const char * const names[] = {
    "Pad",
    "Flight",
    nullptr
  };
  return names;
}

inline const char *EnumNameFCState(FCState e) {
  if (e < FCState_Pad || e > FCState_Flight) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesFCState()[index];
}

enum TPCState {
  TPCState_Pad = 0,
  TPCState_Flight = 1,
  TPCState_MIN = TPCState_Pad,
  TPCState_MAX = TPCState_Flight
};

inline const TPCState (&EnumValuesTPCState())[2] {
  static const TPCState values[] = {
    TPCState_Pad,
    TPCState_Flight
  };
  return values;
}

inline const char * const *EnumNamesTPCState() {
  static const char * const names[] = {
    "Pad",
    "Flight",
    nullptr
  };
  return names;
}

inline const char *EnumNameTPCState(TPCState e) {
  if (e < TPCState_Pad || e > TPCState_Flight) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesTPCState()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) FCData FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t State_;
  int8_t padding0__;  int16_t padding1__;
  float AccelX_;
  float AccelY_;
  float AccelZ_;
  float MagX_;
  float MagY_;
  float MagZ_;
  float GyroX_;
  float GyroY_;
  float GyroZ_;
  float Altitude_;

 public:
  FCData() {
    memset(static_cast<void *>(this), 0, sizeof(FCData));
  }
  FCData(FCState _State, float _AccelX, float _AccelY, float _AccelZ, float _MagX, float _MagY, float _MagZ, float _GyroX, float _GyroY, float _GyroZ, float _Altitude)
      : State_(flatbuffers::EndianScalar(static_cast<int8_t>(_State))),
        padding0__(0),
        padding1__(0),
        AccelX_(flatbuffers::EndianScalar(_AccelX)),
        AccelY_(flatbuffers::EndianScalar(_AccelY)),
        AccelZ_(flatbuffers::EndianScalar(_AccelZ)),
        MagX_(flatbuffers::EndianScalar(_MagX)),
        MagY_(flatbuffers::EndianScalar(_MagY)),
        MagZ_(flatbuffers::EndianScalar(_MagZ)),
        GyroX_(flatbuffers::EndianScalar(_GyroX)),
        GyroY_(flatbuffers::EndianScalar(_GyroY)),
        GyroZ_(flatbuffers::EndianScalar(_GyroZ)),
        Altitude_(flatbuffers::EndianScalar(_Altitude)) {
    (void)padding0__;    (void)padding1__;
  }
  FCState State() const {
    return static_cast<FCState>(flatbuffers::EndianScalar(State_));
  }
  float AccelX() const {
    return flatbuffers::EndianScalar(AccelX_);
  }
  float AccelY() const {
    return flatbuffers::EndianScalar(AccelY_);
  }
  float AccelZ() const {
    return flatbuffers::EndianScalar(AccelZ_);
  }
  float MagX() const {
    return flatbuffers::EndianScalar(MagX_);
  }
  float MagY() const {
    return flatbuffers::EndianScalar(MagY_);
  }
  float MagZ() const {
    return flatbuffers::EndianScalar(MagZ_);
  }
  float GyroX() const {
    return flatbuffers::EndianScalar(GyroX_);
  }
  float GyroY() const {
    return flatbuffers::EndianScalar(GyroY_);
  }
  float GyroZ() const {
    return flatbuffers::EndianScalar(GyroZ_);
  }
  float Altitude() const {
    return flatbuffers::EndianScalar(Altitude_);
  }
};
FLATBUFFERS_STRUCT_END(FCData, 44);

struct TPCData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_GPSSTRING = 6,
    VT_BATTERYVOLTAGE = 8
  };
  TPCState State() const {
    return static_cast<TPCState>(GetField<int8_t>(VT_STATE, 0));
  }
  const flatbuffers::String *GPSString() const {
    return GetPointer<const flatbuffers::String *>(VT_GPSSTRING);
  }
  float BatteryVoltage() const {
    return GetField<float>(VT_BATTERYVOLTAGE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           VerifyOffset(verifier, VT_GPSSTRING) &&
           verifier.VerifyString(GPSString()) &&
           VerifyField<float>(verifier, VT_BATTERYVOLTAGE) &&
           verifier.EndTable();
  }
};

struct TPCDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_State(TPCState State) {
    fbb_.AddElement<int8_t>(TPCData::VT_STATE, static_cast<int8_t>(State), 0);
  }
  void add_GPSString(flatbuffers::Offset<flatbuffers::String> GPSString) {
    fbb_.AddOffset(TPCData::VT_GPSSTRING, GPSString);
  }
  void add_BatteryVoltage(float BatteryVoltage) {
    fbb_.AddElement<float>(TPCData::VT_BATTERYVOLTAGE, BatteryVoltage, 0.0f);
  }
  explicit TPCDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TPCDataBuilder &operator=(const TPCDataBuilder &);
  flatbuffers::Offset<TPCData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TPCData>(end);
    return o;
  }
};

inline flatbuffers::Offset<TPCData> CreateTPCData(
    flatbuffers::FlatBufferBuilder &_fbb,
    TPCState State = TPCState_Pad,
    flatbuffers::Offset<flatbuffers::String> GPSString = 0,
    float BatteryVoltage = 0.0f) {
  TPCDataBuilder builder_(_fbb);
  builder_.add_BatteryVoltage(BatteryVoltage);
  builder_.add_GPSString(GPSString);
  builder_.add_State(State);
  return builder_.Finish();
}

inline flatbuffers::Offset<TPCData> CreateTPCDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    TPCState State = TPCState_Pad,
    const char *GPSString = nullptr,
    float BatteryVoltage = 0.0f) {
  auto GPSString__ = GPSString ? _fbb.CreateString(GPSString) : 0;
  return Calstar::CreateTPCData(
      _fbb,
      State,
      GPSString__,
      BatteryVoltage);
}

inline const Calstar::TPCData *GetTPCData(const void *buf) {
  return flatbuffers::GetRoot<Calstar::TPCData>(buf);
}

inline const Calstar::TPCData *GetSizePrefixedTPCData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Calstar::TPCData>(buf);
}

inline bool VerifyTPCDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Calstar::TPCData>(nullptr);
}

inline bool VerifySizePrefixedTPCDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Calstar::TPCData>(nullptr);
}

inline void FinishTPCDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Calstar::TPCData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTPCDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Calstar::TPCData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Calstar

#endif  // FLATBUFFERS_GENERATED_COMMON_CALSTAR_H_
